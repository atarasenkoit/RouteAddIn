|////////////////////////////////////////////////////////////////////////////////
  |ВЫБРАТЬ
  | ВремяРасстояниеМеждуПунктами.Пункт1,
  | ВремяРасстояниеМеждуПунктами.Пункт2,
  | ВремяРасстояниеМеждуПунктами.Время,
  | ВремяРасстояниеМеждуПунктами.Расстояние

СоотвТаблРасстояний = Новый Соответствие();
 ВыборкаПунктов = РезультатЗапроса[1].Выбрать();
 Пока ВыборкаПунктов.Следующий() Цикл 
  СтрокаП1 = СоотвТаблРасстояний.Получить(ВыборкаПунктов.Пункт1);
  Если СтрокаП1 = Неопределено Тогда 
   СоотвТаблРасстояний.Вставить(ВыборкаПунктов.Пункт1, Новый Соответствие());
   СтрокаП1 = СоотвТаблРасстояний.Получить(ВыборкаПунктов.Пункт1);
  КонецЕсли;
  СтрокаП2 = СтрокаП1.Получить(ВыборкаПунктов.Пункт2);
  Если СтрокаП2 = Неопределено Тогда 
   СтрокаП1.Вставить(ВыборкаПунктов.Пункт2, Новый Структура("Время,Расстояние", Неопределено, Неопределено));
   СтрокаП2 = СтрокаП1.Получить(ВыборкаПунктов.Пункт2);
  КонецЕсли;
  СтрокаП2.Время      = ВыборкаПунктов.Время;
  СтрокаП2.Расстояние = ВыборкаПунктов.Расстояние;
 КонецЦикла;
 
Процедура ПолучитьРаспределениеЗаказов(Заказы, ЗаказыПоКоординатам, мсвТС, АдресДепо, НастройкаКластеризации, РежимОптимизации, ОграничениеЧасов=Неопределено, ВремяВыезда='00010101000000', СжиматьЗаказы=Ложь) Экспорт
	
	ВекторОбход = Новый ТаблицаЗначений();
	ВекторОбход.Колонки.Добавить("Значение",        Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя, УникальныйИдентификатор"));
	ВекторОбход.Колонки.Добавить("ОценкаПогрузка",  Новый ОписаниеТипов("Число"));
	ВекторОбход.Колонки.Добавить("ОценкаРазгрузка", Новый ОписаниеТипов("Число"));
	ВекторОбход.Колонки.Добавить("Приоритет",       Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекЗаказ Из ТабЗаказы Цикл 
		Если _АдресДепо = ТекЗаказ.ПунктПогрузки Тогда 
			мЦенаПогрузка = 0;
		Иначе 
			Узел1 = СоотвТаблРасстояний.Получить(_АдресДепо);
			Если Узел1 = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Узел2 = Узел1.Получить(ТекЗаказ.ПунктПогрузки);
			Если Узел2 = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Если РежимОптимизации = 0 Тогда 
				мЦенаПогрузка = Узел2.Время;
			Иначе 
				мЦенаПогрузка = Узел2.Расстояние;
			КонецЕсли;
		КонецЕсли;
		
		Если _АдресДепо = ТекЗаказ.ПунктРазгрузки Тогда 
			мЦенаРазгрузка = 0;
		Иначе 
			Узел1 = СоотвТаблРасстояний.Получить(_АдресДепо);
			Если Узел1 = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Узел2 = Узел1.Получить(ТекЗаказ.ПунктРазгрузки);
			Если Узел2 = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Если РежимОптимизации = 0 Тогда 
				мЦенаРазгрузка = Узел2.Время;
			Иначе 
				мЦенаРазгрузка = Узел2.Расстояние;
			КонецЕсли;
		КонецЕсли;
		
		НовСтрокаОбход = ВекторОбход.Добавить();
		НовСтрокаОбход.Значение        = ТекЗаказ.Ссылка;
		НовСтрокаОбход.ОценкаПогрузка  = мЦенаПогрузка;
		НовСтрокаОбход.ОценкаРазгрузка = мЦенаРазгрузка;
		НовСтрокаОбход.Приоритет       = ТекЗаказ.Приоритет;
	КонецЦикла;
		
	ВекторОбход.Сортировать("ОценкаПогрузка Возр, ОценкаРазгрузка Возр, Приоритет Убыв");
	
	//Подготовили вектор обхода
	
	Для Каждого ТекЭлемент Из ВекторОбход Цикл 
	
	// 1-я часть алгоритма
	
		ТабОценок = Новый ТаблицаЗначений();
		ТабОценок.Колонки.Добавить("Значение",  Новый ОписаниеТипов("Структура"));
		ТабОценок.Колонки.Добавить("Оценка",    Новый ОписаниеТипов("Число"));
		ТабОценок.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
		ТабОценок.Колонки.Добавить("ДопПоле",   Новый ОписаниеТипов("Число"));
		
		ДанныеЗаказа = ТабЗаказы.Найти(ТекЭлемент.Значение, "Ссылка");
		
		Для Каждого ТекПул Из пулы Цикл 
			ПредПул = Новый Массив();
			Для Каждого ТекЭлемент Из ТекПул.маршрут Цикл 
				ПредПул.Добавить(ТекЭлемент);
			КонецЦикла;
			
			ПредПул.Добавить(Новый Структура("заказ,пункт,Операция", ДанныеЗаказа.Ссылка, ДанныеЗаказа.ПунктПогрузки, Перечисления.уатТипыТочекМаршрута.Погрузка));
			ПредПул.Добавить(Новый Структура("заказ,пункт,Операция", ДанныеЗаказа.Ссылка, ДанныеЗаказа.ПунктРазгрузки, Перечисления.уатТипыТочекМаршрута.Разгрузка));
			
			
			СчВнеш = ПредПул.Количество()-1;
			Пока Истина Цикл 
				Если СчВнеш < 0 Тогда 
					Прервать;
				КонецЕсли;
				
				СчВнут = СчВнеш-1;
				Пока Истина Цикл 
					Если СчВнут < 0 Тогда 
						СчВнут = ПредПул.Количество()-1;
					КонецЕсли;
					Если СчВнеш = СчВнут Тогда 
						Прервать;
					КонецЕсли;
					
					НовПул = Новый Массив();
					
					Для Каждого ТекЭлемент Из ПредПул Цикл 
						НовПул.Добавить(ТекЭлемент);
					КонецЦикла;
					
					ДанныеЭлемента = НовПул[СчВнеш];
					НовПул.Удалить(СчВнеш);
					НовПул.Вставить(СчВнут, ДанныеЭлемента);
					
					флПулКорректен = Истина;
					Для СчПроверка1 = 0 По НовПул.Количество()-1 Цикл 
						флПроверен = Ложь;
						
						Если НовПул[СчПроверка1].Операция = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
							Для СчПроверка2 = СчПроверка1+1 По НовПул.Количество()-1 Цикл 
								Если НовПул[СчПроверка2].заказ = НовПул[СчПроверка1].заказ И НовПул[СчПроверка2].Операция = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда 
									флПроверен = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						Иначе 
							Продолжить;
						КонецЕсли;
						
						Если Не флПроверен Тогда 
							флПулКорректен = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Не флПулКорректен Тогда 
						СчВнут = СчВнут - 1;
						Продолжить;
					КонецЕсли;
					
					Встав = Истина;
					ОбщВремя = 0;
					ОбщРасстояние = 0;
					мсвПосещенныеПункты = Новый Массив();
					
					Для СчОбх = -1 По НовПул.Количество()-2 Цикл
						ДопЗадержка = 0;
						
						Если СчОбх = -1 Тогда 
							ПунктСтарт = _АдресДепо;
						Иначе 
							ПунктСтарт = НовПул[СчОбх].пункт;
						КонецЕсли;
						
						ПунктФиниш = НовПул[СчОбх+1].пункт;
						
						Если ПунктСтарт = ПунктФиниш Тогда 
							мВремя = 0;
							мРасстояние = 0;
						Иначе 
							Узел1 = СоотвТаблРасстояний.Получить(ПунктСтарт);
							Если Узел1 = Неопределено Тогда 
								Встав = Ложь;
								Прервать;
							КонецЕсли;
							Узел2 = Узел1.Получить(ПунктФиниш);
							Если Узел2 = Неопределено Тогда 
								Встав = Ложь;
								Прервать;
							КонецЕсли;
							мВремя      = Узел2.Время;
							мРасстояние = Узел2.Расстояние;
						КонецЕсли;
						
						ВремяВТочке = СложитьВремя1СЧЧММ(ВремяВыезда, ОбщВремя);
						НовСкорость = 0;
						Для Каждого ТекСтрСкор Из ТабСкоростей Цикл 
							Если (ТекСтрСкор.НачалоПериода > ТекСтрСкор.КонецПериода И (ВремяВТочке >= ТекСтрСкор.НачалоПериода
									Или ВремяВТочке <= ТекСтрСкор.КонецПериода)) Или
									(ВремяВТочке >= ТекСтрСкор.НачалоПериода И ВремяВТочке <= ТекСтрСкор.КонецПериода) Тогда 
								НовСкорость = ТекСтрСкор.Скорость;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если Не НовСкорость = 0 Тогда 
							мВремя = мРасстояние / НовСкорость;
						КонецЕсли;
						
						Если Не СчОбх < 0 Тогда 
							СтрокаЗаказа = ТабЗаказы.Найти(НовПул[СчОбх].заказ, "Ссылка");
							Если НовПул[СчОбх].Операция = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
								Если Не (Не мсвПосещенныеПункты.Найти(СтрокаЗаказа.АдресОтправления)=Неопределено И СтрокаЗаказа.СтоянкаПолученаИзПунктаОтправления) Тогда 
									мВремя = СложитьВремяЧЧММ(мВремя, СтрокаЗаказа.СтоянкаПунктОтправления);
									мсвПосещенныеПункты.Добавить(СтрокаЗаказа.АдресОтправления);
								КонецЕсли;
							Иначе 
								Если Не (Не мсвПосещенныеПункты.Найти(СтрокаЗаказа.АдресНазначения)=Неопределено И СтрокаЗаказа.СтоянкаПолученаИзПунктаНазначения) Тогда 
									мВремя = СложитьВремяЧЧММ(мВремя, СтрокаЗаказа.СтоянкаПунктНазначения);
									мсвПосещенныеПункты.Добавить(СтрокаЗаказа.АдресНазначения);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаЗаказа = ТабЗаказы.Найти(НовПул[СчОбх+1].заказ, "Ссылка");
						Если НовПул[СчОбх+1].Операция = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
							Если Не (Не мсвПосещенныеПункты.Найти(СтрокаЗаказа.АдресОтправления)=Неопределено И СтрокаЗаказа.СтоянкаПолученаИзПунктаОтправления) Тогда 
								мВремя = СложитьВремяЧЧММ(мВремя, СтрокаЗаказа.СтоянкаПунктОтправления);
								мсвПосещенныеПункты.Добавить(СтрокаЗаказа.АдресОтправления);
							КонецЕсли;
						Иначе 
							Если Не (Не мсвПосещенныеПункты.Найти(СтрокаЗаказа.АдресНазначения)=Неопределено И СтрокаЗаказа.СтоянкаПолученаИзПунктаНазначения) Тогда 
								мВремя = СложитьВремяЧЧММ(мВремя, СтрокаЗаказа.СтоянкаПунктНазначения);
								мсвПосещенныеПункты.Добавить(СтрокаЗаказа.АдресНазначения);
							КонецЕсли;
						КонецЕсли;
						
						ОбщВремя      = СложитьВремяЧЧММ(ОбщВремя, мВремя);
						ОбщРасстояние = ОбщРасстояние + мРасстояние;
					КонецЦикла;
					
					Если Не Встав Тогда 
						СчВнут = СчВнут - 1;
						Продолжить;
					КонецЕсли;
					
					ТекОценка = ?(РежимОптимизации = 0, ОбщВремя, ОбщРасстояние);
					
					Если Не ОграничениеЧасов = Неопределено И ОбщВремя > ОграничениеЧасов Тогда 
						Встав = Ложь;
						СчВнут = СчВнут - 1;
						Продолжить;
					КонецЕсли;
					
					Если Встав Тогда 
						мРез = Новый Структура("Пул,НовПул,НовОценка",ТекПул,НовПул,ТекОценка);
						
						ДельтаОценки = ТекОценка-ТекПул.оценка;
						
						НовСтрокаОценки = ТабОценок.Добавить();
						НовСтрокаОценки.Значение  = мРез;
						НовСтрокаОценки.Оценка    = ДельтаОценки;
						НовСтрокаОценки.Приоритет = ДанныеЗаказа.Приоритет;
						НовСтрокаОценки.ДопПоле   = 1;
					КонецЕсли;
					
					
					СчВнут = СчВнут - 1;
				КонецЦикла;
				СчВнеш = СчВнеш - 1;
			КонецЦикла;
		КонецЦикла;
		
		// 2-я часть алгоритма
		
		Если ТабТС.Количество() Тогда 
			ОбщВремя = 0;
			ОбщРасстояние = 0;
			Встав = Истина;
			мсвПосещенныеПункты = Новый Массив();
			
			Для СчОбх = 0 По 1 Цикл
				Если СчОбх = 0 Тогда 
					ПунктСтарт = _АдресДепо;
					ПунктФиниш = ДанныеЗаказа.ПунктПогрузки;
				Иначе 
					ПунктСтарт = ДанныеЗаказа.ПунктПогрузки;
					ПунктФиниш = ДанныеЗаказа.ПунктРазгрузки;
				КонецЕсли;
				
				Если ПунктСтарт = ПунктФиниш Тогда 
					мВремя = 0;
					мРасстояние = 0;
				Иначе 
					Узел1 = СоотвТаблРасстояний.Получить(ПунктСтарт);
					Если Узел1 = Неопределено Тогда 
						Встав = Ложь;
						Прервать;
					КонецЕсли;
					Узел2 = Узел1.Получить(ПунктФиниш);
					Если Узел2 = Неопределено Тогда 
						Встав = Ложь;
						Прервать;
					КонецЕсли;
					
					мВремя      = Узел2.Время;
					мРасстояние = Узел2.Расстояние;
				КонецЕсли;
				
				ВремяВТочке = СложитьВремя1СЧЧММ(ВремяВыезда, ОбщВремя);
				НовСкорость = 0;
				Для Каждого ТекСтрСкор Из ТабСкоростей Цикл 
					Если (ТекСтрСкор.НачалоПериода > ТекСтрСкор.КонецПериода И (ВремяВТочке >= ТекСтрСкор.НачалоПериода
							Или ВремяВТочке <= ТекСтрСкор.КонецПериода)) Или
							(ВремяВТочке >= ТекСтрСкор.НачалоПериода И ВремяВТочке <= ТекСтрСкор.КонецПериода) Тогда 
						НовСкорость = ТекСтрСкор.Скорость;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не НовСкорость = 0 Тогда 
					мВремя = мРасстояние / НовСкорость;
				КонецЕсли;
				
				Если Не (Не мсвПосещенныеПункты.Найти(ДанныеЗаказа.АдресОтправления)=Неопределено И ДанныеЗаказа.СтоянкаПолученаИзПунктаОтправления) Тогда 
					мВремя = СложитьВремяЧЧММ(мВремя, ДанныеЗаказа.СтоянкаПунктОтправления);
					мсвПосещенныеПункты.Добавить(ДанныеЗаказа.АдресОтправления);
				КонецЕсли;
				
				Если Не (Не мсвПосещенныеПункты.Найти(ДанныеЗаказа.АдресНазначения)=Неопределено И ДанныеЗаказа.СтоянкаПолученаИзПунктаНазначения) Тогда 
					мВремя = СложитьВремяЧЧММ(мВремя, ДанныеЗаказа.СтоянкаПунктНазначения);
					мсвПосещенныеПункты.Добавить(ДанныеЗаказа.АдресНазначения);
				КонецЕсли;
				
				ОбщВремя      = СложитьВремяЧЧММ(ОбщВремя, мВремя);
				ОбщРасстояние = ОбщРасстояние + мРасстояние;
				
				Если ?(ОграничениеЧасов=Неопределено, Ложь, ОбщВремя > ОграничениеЧасов) Тогда 
					Встав = Ложь;
					Прервать;
				КонецЕсли;
				
				Если Не Встав Тогда 
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Встав Тогда 
				НовПул = Новый Массив();
				НовПул.Добавить(Новый Структура("заказ,пункт,Операция", ДанныеЗаказа.Ссылка, ДанныеЗаказа.ПунктПогрузки, Перечисления.уатТипыТочекМаршрута.Погрузка));
				НовПул.Добавить(Новый Структура("заказ,пункт,Операция", ДанныеЗаказа.Ссылка, ДанныеЗаказа.ПунктРазгрузки, Перечисления.уатТипыТочекМаршрута.Разгрузка));
				
				мРез = Новый Структура("Пул,НовПул,НовОценка",Неопределено,НовПул,?(РежимОптимизации = 0, ОбщВремя, ОбщРасстояние));
				
				НовСтрокаОценки = ТабОценок.Добавить();
				НовСтрокаОценки.Значение  = мРез;
				НовСтрокаОценки.Оценка    = ?(РежимОптимизации = 0, ОбщВремя, ОбщРасстояние);
				НовСтрокаОценки.Приоритет = ДанныеЗаказа.Приоритет;
				НовСтрокаОценки.ДопПоле   = 2;
			КонецЕсли;
		КонецЕсли;
		
		ТабОценок.Сортировать("Оценка Возр, Приоритет Убыв, ДопПоле Возр");
		
		// 3-я часть алгоритма
		
		Для Каждого ТекВариант Из ТабОценок Цикл 
			Если ТекВариант.Значение.Пул = Неопределено Тогда 
				МаксимальныйВес   = ДанныеЗаказа.ВесБрутто;
				МаксимальныйОбъем = ДанныеЗаказа.Объем;
			Иначе 
				МаксимальныйВес   = 0;
				МаксимальныйОбъем = 0;
				
				ТекВес   = 0;
				ТекОбъем = 0;
				
				Для Сч=0 По ТекВариант.Значение.НовПул.Количество()-1 Цикл 
					СтрокаПула = ТекВариант.Значение.НовПул[Сч];
					СтрокаЗаказа = ТабЗаказы.Найти(СтрокаПула.Заказ, "Ссылка");
					Если СтрокаПула.Операция = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
						ТекВес   = ТекВес + СтрокаЗаказа.ВесБрутто;
						ТекОбъем = ТекОбъем + СтрокаЗаказа.Объем;
					Иначе 
						ТекВес   = ТекВес - СтрокаЗаказа.ВесБрутто;
						ТекОбъем = ТекОбъем - СтрокаЗаказа.Объем;
					КонецЕсли;
					
					МаксимальныйВес   = Макс(МаксимальныйВес, ТекВес);
					МаксимальныйОбъем = Макс(МаксимальныйОбъем, ТекОбъем);
				КонецЦикла;
			КонецЕсли;
			
			Если ТекВариант.Значение.пул = Неопределено Тогда 
				СтрокаТС = Неопределено;
				Для Каждого ТекТС Из ТабТС Цикл 
					Если ТекТС.Грузоподъемность >= МаксимальныйВес И ТекТС.ОбъемКузова >= МаксимальныйОбъем Тогда 
						СтрокаТС = ТекТС;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не СтрокаТС = Неопределено Тогда
					ДанныеПула = Новый Структура("ТС,ГрузоподъемностьТС,ОбъемКузоваТС,ПорядокТС,оценка,маршрут,МаксимальныйВес,МаксимальныйОбъем,GUID",
						СтрокаТС.Ссылка,
						СтрокаТС.Грузоподъемность,
						СтрокаТС.ОбъемКузова,
						СтрокаТС.Порядок,
						ТекВариант.Значение.НовОценка,
						Новый Массив(),
						МаксимальныйВес,
						МаксимальныйОбъем,
						Новый УникальныйИдентификатор());
						
					ДанныеПула.маршрут.Добавить(Новый Структура("заказ,пункт,Операция",
						ДанныеЗаказа.Ссылка,
						ДанныеЗаказа.ПунктПогрузки,
						Перечисления.уатТипыТочекМаршрута.Погрузка));
					
					ДанныеПула.маршрут.Добавить(Новый Структура("заказ,пункт,Операция",
						ДанныеЗаказа.Ссылка,
						ДанныеЗаказа.ПунктРазгрузки,
						Перечисления.уатТипыТочекМаршрута.Разгрузка));
					
					пулы.Добавить(ДанныеПула);
					ТабТС.Удалить(СтрокаТС);
					Прервать;
				КонецЕсли;
				
			Иначе
				Если ТекВариант.Значение.пул.ГрузоподъемностьТС < МаксимальныйВес
						Или ТекВариант.Значение.пул.ОбъемКузоваТС < МаксимальныйОбъем Тогда
					СтрокаТС = Неопределено;
					Для Каждого ТекТС Из ТабТС Цикл 
						Если ТекТС.Грузоподъемность >= МаксимальныйВес И ТекТС.ОбъемКузова >= МаксимальныйОбъем Тогда 
							СтрокаТС = ТекТС;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если СтрокаТС = Неопределено Тогда 
						Продолжить;
					Иначе 
						// вернуть старый ТС
						НовСтрТС = ТабТС.Добавить();
						НовСтрТС.Ссылка           = ТекВариант.Значение.пул.ТС;
						НовСтрТС.Грузоподъемность = ТекВариант.Значение.пул.ГрузоподъемностьТС;
						НовСтрТС.ОбъемКузова      = ТекВариант.Значение.пул.ОбъемКузоваТС;
						НовСтрТС.Порядок          = ТекВариант.Значение.пул.ПорядокТС;
						
						// подставить новый в пул
						ТекВариант.Значение.пул.ТС                 = СтрокаТС.Ссылка;
						ТекВариант.Значение.пул.ГрузоподъемностьТС = СтрокаТС.Грузоподъемность;
						ТекВариант.Значение.пул.ОбъемКузоваТС      = СтрокаТС.ОбъемКузова;
						ТекВариант.Значение.пул.ПорядокТС          = СтрокаТС.Порядок;
						
						// удалить новый ТС из таблицы
						ТабТС.Удалить(СтрокаТС);
						
						ТабТС.Сортировать("Порядок Возр");
					КонецЕсли;
				КонецЕсли;
				
				ТекВариант.Значение.Пул.маршрут.Очистить();
				
				Для Каждого ТекСтрока Из ТекВариант.Значение.НовПул Цикл 
					ТекВариант.Значение.Пул.маршрут.Добавить(ТекСтрока);
				КонецЦикла;
				
				ТекВариант.Значение.Пул.оценка = ТекВариант.Значение.НовОценка;
				ТекВариант.Значение.Пул.МаксимальныйВес = МаксимальныйВес;
				ТекВариант.Значение.Пул.МаксимальныйОбъем = МаксимальныйОбъем;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
